}
rmsle_preds_lm <- expm1(lm_preds$.pred)
rmsle_actual_lm <- expm1(lm_preds$truth)
rmsle_preds_rf <- expm1(rf_preds$.pred)
rmsle_actual_rf <- expm1(rf_preds$truth)
rmsle(rmsle_preds_lm, rmsle_actual_lm)
rmsle(rmsle_preds_rf, rmsle_actual_rf)
rmsle_preds_lm <- expm1(lm_preds$.pred)
rmsle_actual_lm <- expm1(lm_preds$truth)
rmsle(rmsle_preds_lm, rmsle_actual_lm)
rmsle_preds_rf <- expm1(rf_preds$.pred)
rmsle_actual_rf <- expm1(rf_preds$truth)
rmsle(rmsle_preds_rf, rmsle_actual_rf)
# RMSLE
rmsle <- function(preds, actual) {
preds[preds<0] <- 0 # Prevent negative predictions (lm)
sqrt(mean((log1p(preds) - log1p(actual))^2))
}
rmsle_preds_lm <- expm1(lm_preds$.pred)
rmsle_actual_lm <- expm1(lm_preds$truth)
rmsle(rmsle_preds_lm, rmsle_actual_lm)
rmsle_preds_rf <- expm1(rf_preds$.pred)
rmsle_actual_rf <- expm1(rf_preds$truth)
rmsle(rmsle_preds_rf, rmsle_actual_rf)
summary(lm_preds$.pred)
summary(lm_preds$truth)
# Address categorical features
library(tidymodels)
recipe_model <- recipe(SalePriceLog ~., data=model_data) %>%
step_dummy(all_nominal_predictors()) %>%
prep()
model_matrix <- bake(recipe_model, new_data=NULL)
head(model_matrix)
# Split
set.seed(123)
train_index <- sample(1:nrow(model_matrix), 0.8 * nrow(model_matrix))
train_data <- model_matrix[train_index, ]
test_data <- model_matrix[-train_index, ]
################## Baseline Models
# Simple Linear Regression
linear_rec <- recipe(SalePriceLog ~., data=train_data) %>%
step_dummy(all_nominal_predictors()) %>%
prep()
train_processed <- bake(linear_rec, new_data = NULL)
test_processed <- bake(linear_rec, new_data = test_data)
lm_fit <- linear_reg() %>%
set_engine("lm") %>%
fit(SalePriceLog ~ ., data=train_processed)
lm_preds <- predict(lm_fit, test_processed) %>%
bind_cols(truth=test_processed$SalePriceLog)
metrics(lm_preds, truth=truth, estimate=.pred)
# Random Forest
rf_model <- rand_forest(trees=500) %>%
set_engine("ranger") %>%
set_mode("regression")
rf_wf <- workflow() %>%
add_recipe(linear_rec) %>%
add_model(rf_model)
rf_fit <- rf_wf %>% fit(data=model_matrix[train_index, ])
rf_preds <- predict(rf_fit, model_matrix[-train_index, ]) %>%
bind_cols(truth=model_matrix$SalePriceLog[-train_index])
# Random Forest
rf_rec <- recipe(SalePriceLog ~., data=train_data) %>%
step_dummy(all_nominal_predictors()) %>%
prep()
train_processed <- bake(rf_rec, new_data = NULL)
test_processed  <- bake(rf_rec, new_data = test_data)
rf_model <- rand_forest(trees=500) %>%
set_engine("ranger") %>%
set_mode("regression")
rf_fit <- rf_wf %>% fit(SalePriceLog ~., data=train_processed)
rf_fit <- rf_model %>% fit(SalePriceLog ~., data=train_processed)
rf_preds <- predict(rf_fit, new_data = test_processed) %>%
bind_cols(truth=test_processed$SalePriceLog)
metrics(rf_preds, truth=truth, estimate=.pred)
# RMSLE
rmsle <- function(preds, actual) {
preds[preds<0] <- 0 # Prevent negative predictions (lm)
sqrt(mean((log1p(preds) - log1p(actual))^2))
}
summary(lm_preds$.pred)
summary(lm_preds$truth)
lm_preds <- predict(lm_fit, test_processed) %>%
bind_cols(truth=test_processed$SalePriceLog)
metrics(lm_preds, truth=truth, estimate=.pred)
summary(lm_preds$.pred)
summary(lm_preds$truth)
linear_rec <- recipe(SalePriceLog ~., data=train_data) %>%
step_dummy(all_nominal_predictors()) %>%
prep()
train_processed <- bake(linear_rec, new_data = NULL)
test_processed <- bake(linear_rec, new_data = test_data)
lm_fit <- linear_reg() %>%
set_engine("lm") %>%
fit(SalePriceLog ~ ., data=train_processed)
lm_preds <- predict(lm_fit, test_processed) %>%
bind_cols(truth=test_processed$SalePriceLog)
metrics(lm_preds, truth=truth, estimate=.pred)
summary(lm_preds$.pred)
summary(lm_preds$truth)
rmsle_preds_lm <- expm1(lm_preds$.pred)
rmsle_actual_lm <- expm1(lm_preds$truth)
rmsle(rmsle_preds_lm, rmsle_actual_lm)
rmsle_preds_rf <- expm1(rf_preds$.pred)
rmsle_actual_rf <- expm1(rf_preds$truth)
rmsle(rmsle_preds_rf, rmsle_actual_rf)
sum(is.na(test_processed))
missing_test <- test_processed %>%
summarise_all(~ sum(is.na(.))) %>%
pivot_longer(cols=everything(), names_to="variable", values_to="missing") %>%
filter(missing>0) %>%
arrange(desc(missing))
missing_test
sum(is.na(train_processed))
View(train_processed)
View(test_processed)
missing_train <- train_processed %>%
summarise_all(~ sum(is.na(.))) %>%
pivot_longer(cols=everything(), names_to="variable", values_to="missing") %>%
filter(missing>0) %>%
arrange(desc(missing))
missing_train
################## Baseline Models
# Simple Linear Regression
linear_rec <- recipe(SalePriceLog ~., data=train_data) %>%
step_unknown(all_nominal_predictors(), new_level = "Missing")
################## Baseline Models
# Simple Linear Regression
linear_rec <- recipe(SalePriceLog ~., data=train_data) %>%
step_unknown(all_nominal_predictors(), new_level = "Missing") %>%
step_dummy(all_nominal_predictors()) %>%
prep()
train_processed <- bake(linear_rec, new_data = NULL)
test_processed <- bake(linear_rec, new_data = test_data)
lm_fit <- linear_reg() %>%
set_engine("lm") %>%
fit(SalePriceLog ~ ., data=train_processed)
lm_preds <- predict(lm_fit, test_processed) %>%
bind_cols(truth=test_processed$SalePriceLog)
metrics(lm_preds, truth=truth, estimate=.pred)
sum(is.na(test_processed))
sum(is.na(train_processed))
missing_test <- test_processed %>%
summarise_all(~ sum(is.na(.))) %>%
pivot_longer(cols=everything(), names_to="variable", values_to="missing") %>%
filter(missing>0) %>%
arrange(desc(missing))
missing_test
################## Baseline Models
# Simple Linear Regression
linear_rec <- recipe(SalePriceLog ~., data=train_data) %>%
step_unknown(all_nominal_predictors(), new_level = "Missing") %>%
step_dummy(all_nominal_predictors()) %>%
prep()
train_processed <- bake(linear_rec, new_data = NULL)
test_processed <- bake(linear_rec, new_data = test_data)
lm_fit <- linear_reg() %>%
set_engine("lm") %>%
fit(SalePriceLog ~ ., data=train_processed)
lm_preds <- predict(lm_fit, test_processed) %>%
bind_cols(truth=test_processed$SalePriceLog)
metrics(lm_preds, truth=truth, estimate=.pred)
sum(is.na(test_processed))
sum(is.na(train_processed))
################## Baseline Models
# Simple Linear Regression
linear_rec <- recipe(SalePriceLog ~., data=train_data) %>%
step_unknown(all_nominal_predictors(), new_level = "Missing") %>%
step_dummy(all_nominal_predictors()) %>%
prep()
lm_train_processed <- bake(linear_rec, new_data = NULL)
lm_test_processed <- bake(linear_rec, new_data = test_data)
lm_fit <- linear_reg() %>%
set_engine("lm") %>%
fit(SalePriceLog ~ ., data=lm_train_processed)
lm_preds <- predict(lm_fit, lm_test_processed) %>%
bind_cols(truth=lm_test_processed$SalePriceLog)
metrics(lm_preds, truth=truth, estimate=.pred)
sum(is.na(lm_test_processed))
sum(is.na(lm_train_processed))
rf_rec <- recipe(SalePriceLog ~., data=train_data) %>%
step_dummy(all_nominal_predictors()) %>%
prep()
rf_train_processed <- bake(rf_rec, new_data = NULL)
rf_test_processed  <- bake(rf_rec, new_data = test_data)
rf_model <- rand_forest(trees=500) %>%
set_engine("ranger") %>%
set_mode("regression")
rf_fit <- rf_model %>% fit(SalePriceLog ~., data=rf_train_processed)
rf_preds <- predict(rf_fit, new_data = rf_test_processed) %>%
bind_cols(truth=rf_test_processed$SalePriceLog)
metrics(rf_preds, truth=truth, estimate=.pred)
linear_rec <- recipe(SalePriceLog ~., data=train_data) %>%
step_unknown(all_nominal_predictors(), new_level = "Missing") %>%
step_dummy(all_nominal_predictors()) %>%
prep()
lm_train_processed <- bake(linear_rec, new_data = NULL)
lm_test_processed <- bake(linear_rec, new_data = test_data)
lm_fit <- linear_reg() %>%
set_engine("lm") %>%
fit(SalePriceLog ~ ., data=lm_train_processed)
lm_preds <- predict(lm_fit, lm_test_processed) %>%
bind_cols(truth=lm_test_processed$SalePriceLog)
metrics(lm_preds, truth=truth, estimate=.pred)
sum(is.na(lm_test_processed))
sum(is.na(lm_train_processed))
View(lm_test_processed)
################## Baseline Models
# Simple Linear Regression
linear_rec <- recipe(SalePriceLog ~., data=train_data) %>%
step_unknown(all_nominal_predictors(), new_level = "Missing") %>%
step_dummy(all_nominal_predictors()) %>%
prep()
lm_train_processed <- bake(linear_rec, new_data = NULL)
lm_test_processed <- bake(linear_rec, new_data = test_data)
View(linear_rec)
################## Baseline Models
# Simple Linear Regression
linear_rec <- recipe(SalePriceLog ~., data=train_data) %>%
step_string2factor(all_nominal_predictors()) %>%
step_unknown(all_nominal_predictors(), new_level = "Missing") %>%
step_dummy(all_nominal_predictors()) %>%
prep()
lm_train_processed <- bake(linear_rec, new_data = NULL)
lm_test_processed <- bake(linear_rec, new_data = test_data)
################## Baseline Models
# Simple Linear Regression
linear_rec <- recipe(SalePriceLog ~., data=train_data) %>%
step_string2factor(all_nominal_predictors()) %>%
step_unknown(all_nominal_predictors(), new_level = "Missing") %>%
step_dummy(all_nominal_predictors()) %>%
prep()
lm_train_processed <- bake(linear_rec, new_data = NULL)
lm_test_processed <- bake(linear_rec, new_data = test_data)
lm_fit <- linear_reg() %>%
set_engine("lm") %>%
fit(SalePriceLog ~ ., data=lm_train_processed)
lm_preds <- predict(lm_fit, lm_test_processed) %>%
bind_cols(truth=lm_test_processed$SalePriceLog)
metrics(lm_preds, truth=truth, estimate=.pred)
sum(is.na(lm_test_processed))
# Address categorical features
library(tidymodels)
recipe_model <- recipe(SalePriceLog ~., data=model_data) %>%
step_string2factor(all_nominal_predictors()) %>%
step_unknown(all_nominal_predictors(), new_level = "Missing") %>%
step_dummy(all_nominal_predictors()) %>%
prep()
model_matrix <- bake(recipe_model, new_data=NULL)
head(model_matrix)
# Split
set.seed(123)
train_index <- sample(1:nrow(model_matrix), 0.8 * nrow(model_matrix))
train_data <- model_matrix[train_index, ]
test_data <- model_matrix[-train_index, ]
################## Baseline Models
# Simple Linear Regression
str(train_data$B)
################## Baseline Models
# Simple Linear Regression
linear_rec <- recipe(SalePriceLog ~., data=train_data) %>%
step_string2factor(all_nominal_predictors()) %>%
step_unknown(all_nominal_predictors(), new_level = "Missing") %>%
step_dummy(all_nominal_predictors()) %>%
prep()
lm_train_processed <- bake(linear_rec, new_data = NULL)
lm_test_processed <- bake(linear_rec, new_data = test_data)
lm_fit <- linear_reg() %>%
set_engine("lm") %>%
fit(SalePriceLog ~ ., data=lm_train_processed)
lm_preds <- predict(lm_fit, lm_test_processed) %>%
bind_cols(truth=lm_test_processed$SalePriceLog)
metrics(lm_preds, truth=truth, estimate=.pred)
sum(is.na(lm_test_processed))
sum(is.na(lm_train_processed))
linear_rec <- recipe(SalePriceLog ~., data=train_data) %>%
step_string2factor(all_nominal_predictors()) %>% # Makes character columns into proper factors
step_unknown(all_nominal_predictors(), new_level = "Missing") %>% # Address those houses without BsmtQual
step_dummy(all_nominal_predictors()) %>%
prep()
lm_train_processed <- bake(linear_rec, new_data = NULL)
lm_test_processed <- bake(linear_rec, new_data = test_data)
lm_fit <- linear_reg() %>%
set_engine("lm") %>%
fit(SalePriceLog ~ ., data=lm_train_processed)
lm_preds <- predict(lm_fit, lm_test_processed) %>%
bind_cols(truth=lm_test_processed$SalePriceLog)
metrics(lm_preds, truth=truth, estimate=.pred)
rf_rec <- recipe(SalePriceLog ~., data=train_data) %>%
step_dummy(all_nominal_predictors()) %>%
prep()
rf_train_processed <- bake(rf_rec, new_data = NULL)
rf_test_processed  <- bake(rf_rec, new_data = test_data)
rf_model <- rand_forest(trees=500) %>%
set_engine("ranger") %>%
set_mode("regression")
rf_fit <- rf_model %>% fit(SalePriceLog ~., data=rf_train_processed)
rf_preds <- predict(rf_fit, new_data = rf_test_processed) %>%
bind_cols(truth=rf_test_processed$SalePriceLog)
metrics(rf_preds, truth=truth, estimate=.pred)
rmsle <- function(preds, actual) {
preds[preds<0] <- 0 # Prevent negative predictions (lm)
sqrt(mean((log1p(preds) - log1p(actual))^2))
}
rmsle_preds_lm <- expm1(lm_preds$.pred)
rmsle_actual_lm <- expm1(lm_preds$truth)
rmsle(rmsle_preds_lm, rmsle_actual_lm)
rmsle_preds_rf <- expm1(rf_preds$.pred)
rmsle_actual_rf <- expm1(rf_preds$truth)
rmsle(rmsle_preds_rf, rmsle_actual_rf)
summary(lm_fit)
broom:tidy(lm_fit) %>% arrange(p.value)
install.packages("broom")
broom:tidy(lm_fit) %>% arrange(p.value)
broom:tidy(lm_fit) %>% arrange(p.value)
library(broom)
broom:tidy(lm_fit) %>% arrange(p.value)
install.packages("xgboost")
install.packages("doParallel")
############################# Select & Tune Model
# XGBoost
library(tidymodels)
library(xgboost)
library(doParallel)
install.packages("iterators")
install.packages("parallel")
############################# Select & Tune Model
# XGBoost
library(tidymodels)
library(xgboost)
library(doParallel)
xgb_rec <- recipe(SalePriceLog ~ ., data = train_data) %>%
step_string2factor(all_nominal_predictors()) %>%
step_unknown(all_nominal_predictors(), new_level = "Missing") %>%
step_impute_median(all_numeric_predictors()) %>%
step_dummy(all_nominal_predictors()) %>%
prep()
xgb_train_processed <- bake(xgb_rec, new_data = NULL)
xgb_test_processed  <- bake(xgb_rec, new_data = test_data)
xgb_spec <- boost_tree(
trees = 1000, # max number of tree
tree_depth = tune(), # how deep each tree can grow
learn_rate = tune(), # how fast it learns
mtry = tune(), # number of predictors sampled
loss_reduction = tune(), # gamma: how much a split needs to reduce loss
sample_size = tune() # subsample ratio
) %>%
set_engine("xgboost") %>%
set_mode("regression")
# CV
set.seed(42)
cv_folds <- vfold_cv(xgb_train_processed, v=5)
xgb_wf <- workflow() %>%
add_model(xgb_spec) %>%
add_formula(SalePriceLog ~.)
xgb_grid <- grid_latin_hypercube(
tree_depth(),
learn_rate(),
mtry(range=c(5, ncol(xgb_train_processed)-1)),
loss_reduction(),
sample_size = sample_prop(),
size = 20
)
registerDoParallel()
xgb_res <- tune_grid(
xgb_wf,
resamples = cv_folds,
grid = xgb_grid,
metrics = metric_set(rmse, rsq, mae),
control = control_grid(save_pred=TRUE)
)
best_xgb <- select_best(xgb_res, "rmse")
best_xgb <- select_best(xgb_res, metric="rmse")
best_xgb
final_xgb_wf <- finalize_workflow(xgb_wf, best_xgb)
final_xgb_fit <- final_xgb_wf %>% fit(data=xgb_train_processed)
xgb_pred <- predict(final_xgb_fit, xgb_test_processed) %>%
bind_cols(truth = xgb_test_processed$SalePriceLog)
metrics(xgb_pred, truth=truth, estimate=.pred)
rmsle_preds_xgb <- expm1(xgb_preds$.pred)
rmsle_actual_xgb <- expm1(xgb_preds$truth)
xgb_preds <- predict(final_xgb_fit, xgb_test_processed) %>%
bind_cols(truth = xgb_test_processed$SalePriceLog)
metrics(xgb_pred, truth=truth, estimate=.pred)
metrics(xgb_preds, truth=truth, estimate=.pred)
rmsle_preds_xgb <- expm1(xgb_preds$.pred)
rmsle_actual_xgb <- expm1(xgb_preds$truth)
rmsle(rmsle_preds_xgb, rmsle_actual_xgb)
library(vip)
vip(final_xgb_fit$fit$fit)
install.packages("vip")
library(vip)
vip(final_xgb_fit$fit$fit)
## (2)
summary(train$SalePrice)
ggplot(train, aes(SalePrice)) +
geom_histogram(bins=30, fill="steelblue", color="white") +
labs(title="SalePrice Distribution", x="Sale Price", y="Frequency")
ggplot(train, aes(SalePriceLog)) +
geom_histogram(bins=30, fill="darkgreen", color="white") +
labs(title="Log-Transform SalePrice", x="Log Sale Price", y="Frequency")
View(test)
###################### Final Test
test_ids <- test$Id
lm_test_processed <- bake(linear_rec, new_data=test)
###################### Final Test
test <- test %>%
mutate(
TotalSF = TotalBsmtSF + `1stFlrSF` + `2ndFlrSF`, # Total space
AgeAtSale = YrSold - YearBuilt, # Shows aging of house
Remodeled = as.integer(YearRemodAdd != YearBuilt), # 1 - if the remodel date happened, 0 - if remodel didn't happen same date as built date
HasBasement = as.integer(TotalBsmtSF>0), # 1 - if basement, 0 - if no basement
GarageAge = YrSold - GarageYrBlt,
HasGarage = as.integer(!is.na(GarageYrBlt)),
TotalBathrooms = FullBath + 0.5*HalfBath + BsmtFullBath + 0.5*BsmtHalfBath
)
test_ids <- test$Id
lm_test_processed <- bake(linear_rec, new_data=test)
################## Baseline Models
# Simple Linear Regression
linear_rec <- recipe(SalePriceLog ~., data=train_data) %>%
step_string2factor(all_nominal_predictors()) %>% # Makes character columns into proper factors
step_unknown(all_nominal_predictors(), new_level = "Missing") %>% # Address those houses without BsmtQual
step_novel(all_nominal_predictors()) %>%
step_dummy(all_nominal_predictors()) %>%
prep()
xgb_rec <- recipe(SalePriceLog ~ ., data = train_data) %>%
step_string2factor(all_nominal_predictors()) %>%
step_unknown(all_nominal_predictors(), new_level = "Missing") %>%
step_impute_median(all_numeric_predictors()) %>%
step_novel(all_nominal_predictors()) %>%
step_dummy(all_nominal_predictors()) %>%
prep()
###################### Final Test
test <- test %>%
mutate(
TotalSF = TotalBsmtSF + `1stFlrSF` + `2ndFlrSF`, # Total space
AgeAtSale = YrSold - YearBuilt, # Shows aging of house
Remodeled = as.integer(YearRemodAdd != YearBuilt), # 1 - if the remodel date happened, 0 - if remodel didn't happen same date as built date
HasBasement = as.integer(TotalBsmtSF>0), # 1 - if basement, 0 - if no basement
GarageAge = YrSold - GarageYrBlt,
HasGarage = as.integer(!is.na(GarageYrBlt)),
TotalBathrooms = FullBath + 0.5*HalfBath + BsmtFullBath + 0.5*BsmtHalfBath
)
test_ids <- test$Id
lm_test_processed <- bake(linear_rec, new_data=test)
# Feature Engineering
train <- train %>%
mutate(
TotalSF = TotalBsmtSF + `1stFlrSF` + `2ndFlrSF`, # Total space
AgeAtSale = YrSold - YearBuilt, # Shows aging of house
Remodeled = as.integer(YearRemodAdd != YearBuilt), # 1 - if the remodel date happened, 0 - if remodel didn't happen same date as built date
HasBasement = as.integer(TotalBsmtSF>0), # 1 - if basement, 0 - if no basement
GarageAge = YrSold - GarageYrBlt,
HasGarage = as.integer(!is.na(GarageYrBlt)),
TotalBathrooms = FullBath + 0.5*HalfBath + BsmtFullBath + 0.5*BsmtHalfBath
)
test <- test %>%
mutate(
TotalSF = TotalBsmtSF + `1stFlrSF` + `2ndFlrSF`, # Total space
AgeAtSale = YrSold - YearBuilt, # Shows aging of house
Remodeled = as.integer(YearRemodAdd != YearBuilt), # 1 - if the remodel date happened, 0 - if remodel didn't happen same date as built date
HasBasement = as.integer(TotalBsmtSF>0), # 1 - if basement, 0 - if no basement
GarageAge = YrSold - GarageYrBlt,
HasGarage = as.integer(!is.na(GarageYrBlt)),
TotalBathrooms = FullBath + 0.5*HalfBath + BsmtFullBath + 0.5*BsmtHalfBath
)
####################### Prepare Model & First Model
model_data <- train %>%
select(
SalePriceLog,
OverallQual, GrLivArea, GarageCars, GarageArea, TotalBsmtSF, TotalSF,
AgeAtSale, Remodeled, HasBasement, HasGarage, GarageAge, Neighborhood,
HouseStyle, ExterQual, BsmtQual, KitchenQual
)
# Split
set.seed(123)
train_index <- sample(1:nrow(model_data), 0.8 * nrow(model_data))
train_data <- model_data[train_index, ]
val_data <- model_data[-train_index, ]
################## Baseline Models
# Simple Linear Regression
linear_rec <- recipe(SalePriceLog ~., data=train_data) %>%
step_string2factor(all_nominal_predictors()) %>% # Makes character columns into proper factors
step_unknown(all_nominal_predictors(), new_level = "Missing") %>% # Address those houses without BsmtQual
step_novel(all_nominal_predictors()) %>%
step_dummy(all_nominal_predictors()) %>% # Addresses Categorical variables
prep()
xgb_rec <- recipe(SalePriceLog ~ ., data = train_data) %>%
step_string2factor(all_nominal_predictors()) %>%
step_unknown(all_nominal_predictors(), new_level = "Missing") %>%
step_impute_median(all_numeric_predictors()) %>%
step_novel(all_nominal_predictors()) %>%
step_dummy(all_nominal_predictors()) %>%
prep()
###################### Final Test
test_ids <- test$Id
lm_test_processed <- bake(linear_rec, new_data=test)
lm_test_preds <- predict(lm_fit, new_data=lm_test_processed) %>%
mutate(SalePrice = expm1(.pred))
xgb_test_processed <- bake(xgb_rec, new_data=test)
xgb_test_preds <- predict(final_xgb_fit, new_data = xgb_test_processed) %>%
mutate(SalePrice = expm1(.pred))  # undo the log transform
submission <- tibble(
Id = test_ids,
SalePrice_XGB = xgb_test_preds$SalePrice,
SalePrice_LM = lm_test_preds$SalePrice
)
write_csv(submission, "outputs/submission.csv")
write_csv(submission, "outputs/submission.csv")
library(readr)
write_csv(submission, "outputs/submission.csv")
